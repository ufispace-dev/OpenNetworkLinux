#!/bin/bash

VER="0.0.1-bsp"
silence=0

function _ioget {
    reg=$1
    echo "0x"`dd if=/dev/port bs=1 count=1 skip=$((reg)) status=none | xxd -g 1 | cut -d ' ' -f 2`
}

function _ioset {
    local reg=$1
    local val=$(printf "%02x" $(($2)))
    printf "\x${val}" | dd of="/dev/port" bs=1 seek=$((reg)) count=1 conv=notrunc 2>/dev/null
}

print_log()
{
    if [ ${silence} -ne 1 ]; then
        printf "${1}\n"
    fi
}

check_board_bits_type()
{   
    cpld_sku_type_reg=0x701
    #reg_value=`ioget $cpld_sku_type_reg | awk -F' ' '{print $NF}'`
    reg_value=$(_ioget $cpld_sku_type_reg)
    # bit 5
    sku_8bit_value=$(($reg_value & 0x20))
    sku_8bit_type=$(($sku_8bit_value >> 5))
}

check_boardid_hwrev()
{   
    #0: SKU ID Types, 4bit
    #1: SKU ID Types, 8bit
    if [ ${sku_8bit_type} -eq 1 ]; then

        #cpld_skuid_value=$(ioget 0x700 | awk -F" " {'print $NF'})
        cpld_skuid_value=$(_ioget 0x700)
        #cpld_hw_rev_value=$(ioget 0x701 | awk -F" " {'print $NF'})
        cpld_hw_rev_value=$(_ioget 0x701)

        #check board id value
        if [ "$((cpld_skuid_value & 0xff))" == 254 ]; then
            HW_PLAT="HAWKEYE"
        elif [ "$((cpld_skuid_value & 0xff))" == 253 ]; then
           HW_PLAT="X2" 
        else
            HW_PLAT="NA"
        fi

        #check hw rev value
        if [ "$((cpld_hw_rev_value & 0x03))" == 0 ]; then
            HW_REV="PROTO"
        elif [ "$((cpld_hw_rev_value & 0x03))" == 1 ]; then
            HW_REV="ALPHA"
        elif [ "$((cpld_hw_rev_value & 0x03))" == 2 ]; then
            HW_REV="BETA"
        else
            HW_REV="PVT"
        fi

        #check build rev value
        if [ "$((cpld_hw_rev_value & 0x18))" == 0 ]; then
            BUILD_REV="ONE"
        elif [ "$((cpld_hw_rev_value & 0x18))" == 8 ]; then
            BUILD_REV="TWO"
        elif [ "$((cpld_hw_rev_value & 0x18))" == 16 ]; then
            BUILD_REV="THREE"
        else
            BUILD_REV="FOUR"
        fi
    else
        #enable i2c mux 0x75, ch2
        if [ -n "$(i2cset -y 0 0x75 0x4  2>&1 | grep 'Error')" ]; then
            print_log "No i2c mux 0x75, Alpha"
            HW_REV="ALPHA"
        else
            sleep 0.3
            #check if ioexp(0x20) exist or not
            i2cget -y 0 0x20 0 > /dev/null
            if [ $? -ne 0 ]; then
                print_log "IOEXP 0x20 doesn't exist"
                HW_REV="ALPHA"
            else
                sleep 0.3
                #Configure 0x20 ioexp default value
                i2cset -y 0 0x20 0x4 0x0
                i2cset -y 0 0x20 0x5 0x0
                i2cset -y 0 0x20 0x6 0xff
                i2cset -y 0 0x20 0x7 0xff

                #check hw rev value
                hw_rev_value=`i2cget -y 0 0x20 0x1`
                if [ "$((hw_rev_value & 0xC))" == 12 ]; then
                    HW_REV="PVT"
                elif [ "$((hw_rev_value & 0x8))" == 8 ]; then
                    HW_REV="ALPHA"
                elif [ "$((hw_rev_value & 0x4))" == 4 ]; then
                    HW_REV="BETA"
                else
                    HW_REV="PROTO"
                fi

                #check board id value
                if [ "$((hw_rev_value & 0xf0))" == "$((16#10))" ]; then
                    HW_PLAT="QAX"
                elif [ "$((hw_rev_value & 0xf0))" == "$((16#00))"  ]; then
                    HW_PLAT="QAX-Lite"
                elif [ "$((hw_rev_value & 0xf0))" == "$((16#20))"  ]; then
                    HW_PLAT="QAX-NTM"
                elif [ "$((hw_rev_value & 0xf0))" == "$((16#30))"  ]; then
                    HW_PLAT="QUX-FS"
                elif [ "$((hw_rev_value & 0xf0))" == "$((16#40))"  ]; then
                    HW_PLAT="QUX-HB"
                elif [ "$((hw_rev_value & 0xf0))" == "$((16#50))"  ]; then
                    HW_PLAT="Q2A"
                elif [ "$((hw_rev_value & 0xf0))" == "$((16#60))"  ]; then
                    HW_PLAT="Q2U"
                else
                    HW_PLAT="NA"
                fi

                #check build rev value
                if [ "$((hw_rev_value & 0x3))" == 3 ]; then
                    BUILD_REV="FOUR"
                elif [ "$((hw_rev_value & 0x3))" == 1 ]; then
                    BUILD_REV="THREE"
                elif [ "$((hw_rev_value & 0x3))" == 2 ]; then
                    BUILD_REV="TWO"
                else
                    BUILD_REV="ONE"
                fi
            fi
        fi

        #close the i2c mux
        i2cset -y 0 0x75 0x0
    fi
    print_log "$HW_PLAT $HW_REV $BUILD_REV"
    export set HARDWARE_PLATFORM=${HW_PLAT}
    export set HARDWARE_REVISION=${HW_REV}

}

show_ver()
{
    echo "== Utility for reset operation (Version ${VER}) =="
}

help()
{
    echo ""
    echo "========================================================================================================"
    echo "                                      - Reset mac command -"
    echo "========================================================================================================"
    echo "option:"
    echo "  ${0} <device|version> [<loop>] [<silent>]"
    echo "      - To reset mac"
    echo "      device: Specify the chip to reset. Valid value is mac"
    echo "      version: Show script version"
    echo "      loop  : Test cycles, default is 1"
    echo "      silent(optional): Don't display reset result, default is 0"
    echo "usage:"
    echo "  e.g. ${0} mac 1"
    echo ""
    echo "Note:"
    echo "      Currently Hawkeye platform reset mac and i210 need periodic time, others support <loop> option"
}

get_mac_info()
{
    case "${HW_PLAT}" in
    "X2")
        lspci -vvv -s $(setpci -s 00:09.0 0x19.b):00.0 >> /tmp/mac_info 2>&1
        ;;
    *)
        print_log "unknown platform"
        ;;
    esac

}

del_exist_log()
{
    if [ -f "/tmp/mac_info" ]; then
        rm /tmp/mac_info
    fi 
}

pre_check()
{
    case ${1} in
    mac)
        case "${HW_PLAT}" in
        "X2")
            mac_id=`lspci | grep "b27" | head -1 | awk '{print $7}'`
            expected_mac_number=1
            ;;
        *)
            print_log "unknown platform"
            exit 2
            ;;
        esac

        mac_cnt=`lspci | grep ${mac_id} | wc -l`
        if [ ${mac_cnt} -ne ${expected_mac_number} ]; then
            lspci | ${mac_id}
            print_log "Error message : Before test, ${expected_mac_number} MAC should be exist! ( pre_check fail )"
            print_log "resetchip - FAIL"
            exit 2
        fi
        ;;

    *)
        print_log "Invalid Parameters"
        exit 1
        ;;
    esac
}

get_pcie_status()
{
    if [ ${silence} -eq 1 ]; then
        return
    fi

    case ${1} in
    mac)
        case "${HW_PLAT}" in
        "X2")
            echo "RP Status 00:09.0"
            lspci -vvv -s 00:09.0 | grep -e 'DevSta:' -e 'LnkSta:' -e 'UESta:' -e 'CESta:' -e 'SERR'
            printf "MAC Status %s:00.0:\n" $(setpci -s 00:09.0 0x19.b)
            del_exist_log
            #save mac info to /tmp/mac_info
            get_mac_info 
            cat /tmp/mac_info | grep -e 'DevSta:' -e 'LnkSta:' -e 'UESta:' -e 'CESta:' -e 'SERR'
            ;;  
        *)
            print_log "unknown platform"
            ;;
        esac      
        ;;    
    *)
        print_log "Invalid Parameters"
        help
        ;;
    esac
}

verify_pcie_status()
{
    pcie_error=0
    case ${1} in
    mac)
        case "${HW_PLAT}" in
        "X2")
            # RP
            out=`lspci -vvv -s 00:09.0 | grep -e 'DevSta:' | grep -e 'UncorrErr+' -e 'FatalErr+'`
            if [ "${out}" != "" ]; then
                pcie_error=1
            fi
            out=`lspci -vvv -s 00:09.0 | grep -e 'LnkSta:' | grep 'Speed' | grep 'Width'`
            if [ "${out}" == "" ]; then
                pcie_error=1   
            fi
            out=`lspci -vvv -s 00:09.0 | grep -e 'UESta:' | grep -e 'DLP+' -e 'SDES+' -e 'TLP+' -e 'FCP+' -e 'CmpltTO+' -e 'CmpltAbrt+' -e 'UnxCmplt+' -e 'RxOF+' -e 'MalfTLP+' -e 'ECRC+' -e 'ACSViol+'`
            if [ "${out}" != "" ]; then
                pcie_error=1
            fi
            out=`lspci -vvv -s 00:09.0 | grep -e 'CESta:' | grep -e 'RxErr+' -e 'BadTLP+' -e 'BadDLLP+' -e 'Rollover+' -e 'Timeout+'`
            if [ "${out}" != "" ]; then
                pcie_error=1
            fi
            # MAC
            out=`cat /tmp/mac_info| grep -e 'DevSta:' | grep -e 'UncorrErr+' -e 'FatalErr+'`
            if [ "${out}" != "" ]; then
                pcie_error=1
            fi
            out=`cat /tmp/mac_info | grep -e 'LnkSta:' | grep 'Speed' | grep 'Width'`
            if [ "${out}" == "" ]; then
                pcie_error=1
            fi
            out=`cat /tmp/mac_info | grep -e 'UESta:' | grep -e 'DLP+' -e 'SDES+' -e 'TLP+' -e 'FCP+' -e 'CmpltTO+' -e 'CmpltAbrt+' -e 'UnxCmplt+' -e 'RxOF+' -e 'MalfTLP+' -e 'ECRC+' -e 'ACSViol+'`
            if [ "${out}" != "" ]; then
                pcie_error=1
            fi
            out=`cat /tmp/mac_info | grep -e 'CESta:' | grep -e 'RxErr+' -e 'BadTLP+' -e 'BadDLLP+' -e 'Rollover+' -e 'Timeout+'`
            if [ "${out}" != "" ]; then
                pcie_error=1
            fi
            ;;
        *)
            print_log "unknown platform"
            ;;
        esac      
        ;;    
    *)
        ;;
    esac
}

remove_kmod()
{
    case ${1} in
    mac)
        kmod_cnt=`lsmod | grep bde | wc -l`
        if [ ${kmod_cnt} -eq 2 ]; then
            rmmod linux_user_bde
            rmmod linux_kernel_bde
        fi
        ;;
    *)
        print_log "Invalid Parameters"
        help
        ;;
    esac
}

remove_dev()
{
    case ${1} in
    mac)
        case "${HW_PLAT}" in
        "X2")
            if [ -d /sys/bus/pci/devices/0000\:$(setpci -s 00:09.0 0x19.b)\:00.0 ]; then
                echo 1 > /sys/bus/pci/devices/0000\:$(setpci -s 00:09.0 0x19.b)\:00.0/remove
            fi
            ;;
        *)
            print_log "unknown platform"
            exit 2
            ;;
        esac
        sleep 1
        ;;
    *)
        print_log "Invalid Parameters"
        help
        ;;
    esac
}

set_2nd_bus_reset()
{
    case ${1} in
    mac)
        case "${HW_PLAT}" in
        "X2")
            bc=$(setpci -s 00:09.0 BRIDGE_CONTROL)
            if [ ${2} -eq 1 ]; then
                setpci -s 00:09.0 BRIDGE_CONTROL=$(printf "%04x" $(("0x$bc" | 0x40)))
            else
                setpci -s 00:09.0 BRIDGE_CONTROL=$(printf "%04x" $(("0x$bc" & 0xBF)))
            fi
            ;;
        *)
            print_log "unknown platform"
            exit 2
            ;;
        esac
        sleep 1
        ;;
    *)
        print_log "Invalid Parameters"
        exit 1
        ;;
    esac
}

set_dev_reset()
{
    case ${1} in
    mac)
        case "${HW_PLAT}" in
        "X2")
            #val=$(ioget 0x742 | awk -F' ' '{print $NF}')
            val=$(_ioget 0x742)
            sleep 0.1
            if [ ${2} -eq 1 ]; then
                #ioset 0x742 $(printf "0x%02x" $(("$val" & 0xfc)))
                _ioset 0x742 $(printf "0x%02x" $(("$val" & 0xfc)))
            else
                #ioset 0x742 $(printf "0x%02x" $(("$val" | 0xff)))
                _ioset 0x742 $(printf "0x%02x" $(("$val" | 0xff)))
            fi
            sleep 2
            ;;
        *)
            print_log "unknown platform"
            ;;
        esac
        ;;        
    *)
        print_log "Invalid Parameters"
        exit 1
        ;;
    esac
}

rescan_pcie_dev()
{
    case ${1} in
    mac)
        echo 1 > /sys/bus/pci/rescan
        sleep 1
        ;;
    *)
        print_log "Invalid Parameters"
        exit 1
        ;;
    esac
}

reset_mac()
{
    max=${1}
    cnt=0
    while [ ${cnt} -lt ${max} ]
    do
        print_log "Reset MAC Test (${cnt})..."
        print_log "============================================================"

        pre_check mac

        remove_kmod mac
        
        print_log "Before Warm Reset......"
        get_pcie_status mac 

        print_log "Remove MAC......"
        remove_dev mac 
        print_log "done"
        
        # set secondary bus reset to 1 before MAC reset
        print_log "Set SBR......"
        set_2nd_bus_reset mac 1
        print_log "done"
        
        # reset MAC (PCIe)
        print_log "Reset MAC......"
        set_dev_reset mac 1
        print_log "done"

        # unreset MAC (PCIe)
        print_log "Unreset MAC......"
        set_dev_reset mac 0
        print_log "done"
        
        # set secondary bus reset to 0 after MAC reset
        print_log "Unset SBR......"
        set_2nd_bus_reset mac 0
        print_log "done"
        
        # rescan PCIe Bus
        print_log "Rescan PCIe for MACs......"
        rescan_pcie_dev mac 
        print_log "done"
        
        print_log "Check MAC Quantity......"
        #mac id from pre_check mac
        mac_cnt=`lspci | grep ${mac_id} | wc -l`

        if [ ${mac_cnt} -ne ${expected_mac_number} ]; then
            print_log "%d, fail\n" ${mac_cnt}
            print_log "============================================================"
            lspci | grep ${mac_id}
            print_log "Error message : After reset, ${expected_mac_number} MACs should be exist!"
            print_log "resetchip - FAIL"
            exit 2
        fi
        print_log "%d, done\n" ${mac_cnt}

        print_log "Check RP & Device Status......"
        verify_pcie_status mac
        if [ ${pcie_error} -ne 0 ]; then
            print_log "fail\n"
            print_log "============================================================"
            get_pcie_status mac 
            print_log "Error message : After reset, MAC or RP status abnormal!"
            print_log "resetchip - FAIL"
            exit 2
        fi
        print_log "done\n"

        print_log "After Warm Reset......"
        get_pcie_status mac 
        
        print_log "============================================================"

        cnt=$((cnt+1))
    done

    print_log "resetchip - PASS"
}

main()
{
    case ${3} in
    1)
        silence=1
        ;;
    *)
        silence=0
        ;;
    esac

    #### Check SKU ID bits Types 
    check_board_bits_type

    ##### The below function should retrieve $HW_REV and $HW_PLAT
    check_boardid_hwrev

    case ${1} in
    "mac")
        loop=1
        if [ "$#" -eq 2 ]; then
            loop=${2}
        fi
        print_log "Test Parameters: loop - ${loop}"
        reset_mac ${loop}
        ;;

    "version")
        show_ver
        ;;

    "help")
        help
        ;;

    *)
        help
        exit 1
        ;;
    esac
}

main ${1} ${2} ${3} ${4} ${5} ${6} ${7} ${8} ${9} ${10}

exit 0
