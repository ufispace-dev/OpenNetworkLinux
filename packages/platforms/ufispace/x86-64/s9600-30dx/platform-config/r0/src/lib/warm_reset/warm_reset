#!/bin/bash

if [ -z "${UFI_RESET_TOOL_PATH}" ]; then
    #echo "Please set UFI_RESET_TOOL_PATH"
    #exit 1
    export UFI_RESET_TOOL_PATH=$(pwd)
fi

silence=0

print_log()
{
    if [ ${silence} -ne 1 ]; then
        printf "${1}"
    fi
}

bus_num_check()
{
    set_value=${1}
    if [ -f "/sys/bus/i2c/devices/1-0030/cpld_id" ]; then
        print_log "SYSFS exists, skip to set i2c mux...\n"
        i2c_bus_f="-f 1"
    else
        i2cset -y 0 0x75 ${set_value}
        i2c_bus_f="0"
    fi
}

# Get board id
#i2cset -y 0 0x75 0x1
bus_num_check "0x1"
sleep 0.1
board=`i2cget -y ${i2c_bus_f} 0x30 0x00 | awk -F" " '{print $NF}'`
sleep 0.1
#i2cset -y 0 0x75 0x0
bus_num_check "0x0"
sleep 0.1

get_model()
{
    if [ "${board}" == "0x0e" ] || [ "${board}" == "0x0E" ]; then
        echo "NCP1-3_OP2"
    elif [ "${board}" == "0x0f" ] || [ "${board}" == "0x0F" ]; then
        echo "NCP1-3"
    else
        echo "Board not recognized"
        exit 1;
    fi
}

help()
{
    echo ""
    echo "== Utility for reset operation =="
    echo "Format: ${0} <target> [<silent>]"
    echo "  target:"
    echo "    mac  : Reset MAC"
    if [ "${model}" == "NCP1-3_OP2" ]; then
        echo "    op2  : Reset OP2"
    fi
    echo "    gb   : Reset BCM81724"
    echo "  silent(optional): Don't display reset result"
    echo ""
}

#print_log()
#{
#    if [ ${silence} -ne 1 ]; then
#        printf "${1}"
#    fi
#}

get_pcie_status()
{
    case "${1}" in
    "mac")
        echo "RP Status 16:00.0:"
        lspci -vvv -s 16:00.0 | grep -e DevSta: -e LnkSta: -e UESta: -e CESta: -e SERR
        printf "MAC Status %s:00.0:\n" $(setpci -s 16:00.0 0x19.b)
        lspci -vvv -s $(setpci -s 16:00.0 0x19.b):00.0 | grep -e DevSta: -e LnkSta: -e UESta: -e CESta: -e SERR
        ;;
    "op2")
        echo "RP Status 16:01.0:"
        lspci -vvv -s 16:01.0 | grep -e DevSta: -e LnkSta: -e UESta: -e CESta: -e SERR
        printf "OP2 Status %s:00.0:\n" $(setpci -s 16:01.0 0x19.b)
        lspci -vvv -s $(setpci -s 16:01.0 0x19.b):00.0 | grep -e DevSta: -e LnkSta: -e UESta: -e CESta: -e SERR
        ;;
    *)
        echo "Invalid Parameters"
        help
        ;;
    esac
}

remove_kmod()
{
    case "${1}" in
    "mac")
        kmod_cnt=`lsmod | grep bde | wc -l`
        if [ ${kmod_cnt} -eq 2 ]; then
            rmmod linux_user_bde
            rmmod linux_kernel_bde
        fi
        ;;
    "op2")
        kmod_cnt=`lsmod | grep kbp | wc -l`
        if [ ${kmod_cnt} -eq 1 ]; then
            rmmod kbp_driver
        fi
        ;;
    *)
        print_log "Invalid Parameters\n"
        help
        ;;
    esac
}

remove_dev()
{
    case "${1}" in
    "mac")
        echo 1 > /sys/bus/pci/devices/0000\:$(setpci -s 16:00.0 0x19.b)\:00.0/remove
        sleep 1
        ;;
    "op2")
        echo 1 > /sys/bus/pci/devices/0000\:$(setpci -s 16:01.0 0x19.b)\:00.0/remove
        sleep 1
        ;;
    *)
        print_log "Invalid Parameters\n"
        help
        ;;
    esac
}

set_2nd_bus_reset()
{
    case "${1}" in
    "mac")
        if [ ${2} -eq 1 ]; then
            #setpci -s 16:00.0 0x3e.b
            #sleep 0.1
            bc=$(setpci -s 16:00.0 BRIDGE_CONTROL)
            setpci -s 16:00.0 BRIDGE_CONTROL=$(printf "%04x" $(("0x$bc" | 0x40)))
            sleep 0.1
        else
            #setpci -s 16:00.0 0x3e.b
            #sleep 0.1
            bc=$(setpci -s 16:00.0 BRIDGE_CONTROL)
            setpci -s 16:00.0 BRIDGE_CONTROL=$(printf "%04x" $(("0x$bc" & 0xBF)))
            sleep 0.1
        fi
        ;;
    "op2")
        if [ ${2} -eq 1 ]; then
            #setpci -s 16:01.0 0x3e.b
            #sleep 0.1
            bc=$(setpci -s 16:01.0 BRIDGE_CONTROL)
            setpci -s 16:01.0 BRIDGE_CONTROL=$(printf "%04x" $(("0x$bc" | 0x40)))
            sleep 0.1
        else
            #setpci -s 16:01.0 0x3e.b
            #sleep 0.1
            bc=$(setpci -s 16:01.0 BRIDGE_CONTROL)
            setpci -s 16:01.0 BRIDGE_CONTROL=$(printf "%04x" $(("0x$bc" & 0xBF)))
            sleep 0.1
        fi
        ;;
    *)
        print_log "Invalid Parameters\n"
        exit 1
        ;;
    esac
}

reset_mac()
{
    print_log "Reset MAC...\n"
    print_log "==============================\n"
    remove_kmod mac

    print_log "Before MAC Warm Reset ...\n"
    get_pcie_status mac

    print_log "Remove MAC from PCIe bus......"
    remove_dev mac
    sleep 1
    print_log "done\n"

    # set secondary bus reset to 1 before MAC reset
    set_2nd_bus_reset mac 1

    # reset MAC
    print_log "Reset Assertion......"
    #i2cset -y 0 0x75 0x1
    bus_num_check "0x1"
    sleep 0.1
    val=$(i2cget -y ${i2c_bus_f} 0x30 0x40)
    sleep 0.1
    i2cset -y ${i2c_bus_f} 0x30 0x40 $(printf "0x%02x" $(("$val" & 0xFE)))
    sleep 0.1
    #i2cset -y 0 0x75 0x0
    bus_num_check "0x0"
    sleep 2
    print_log "done\n"

    # unreset MAC
    print_log "Reset Deassertion......"
    #i2cset -y 0 0x75 0x1
    bus_num_check "0x1"
    sleep 0.1
    val=$(i2cget -y ${i2c_bus_f} 0x30 0x40)
    sleep 0.1
    i2cset -y ${i2c_bus_f} 0x30 0x40 $(printf "0x%02x" $(("$val" | 0x01)))
    sleep 0.1
    #i2cset -y 0 0x75 0x0
    bus_num_check "0x0"
    sleep 2
    print_log "done\n"

    # set secondary bus reset to 0 after MAC reset
    set_2nd_bus_reset mac 0

    print_log "Rescan PCIe bus......"
    echo 1 > /sys/bus/pci/rescan
    sleep 1
    print_log "done\n"

    print_log "Check MAC status......"
    mac_cnt=`lspci | grep 8690 | wc -l`
    if [ ${mac_cnt} -ne 1 ]; then
        print_log "fail: After reset, 1 MAC should be exist!\n"
        lspci | grep 8690
        exit 2
    else
        print_log "done\n"
    fi

    print_log "After MAC Warm Reset ...\n"
    get_pcie_status mac

    print_log "==============================\n"
    print_log "Reset MAC Done\n\n"
}

reset_op2()
{
    print_log "Reset OP2...\n"
    print_log "==============================\n"
    remove_kmod op2

    print_log "Before OP2 Warm Reset ...\n"
    get_pcie_status op2

    print_log "Remove OP2 from PCIe bus......"
    remove_dev op2
    sleep 1
    print_log "done\n"

    # set secondary bus reset to 1 before reset
    set_2nd_bus_reset op2 1

    # reset OP2
    print_log "Reset Assertion......"
    #i2cset -y 0 0x75 0x1
    bus_num_check "0x1"
    sleep 0.1
    val=$(i2cget -y ${i2c_bus_f} 0x30 0x40)
    sleep 0.1
    i2cset -y ${i2c_bus_f} 0x30 0x40 $(printf "0x%02x" $(("$val" & 0x7F)))
    sleep 0.1
    #i2cset -y 0 0x75 0x0
    bus_num_check "0x0"
    sleep 2
    print_log "done\n"

    # unreset OP2
    print_log "Reset Deassertion......"
    #i2cset -y 0 0x75 0x1
    bus_num_check "0x1"
    sleep 0.1
    val=$(i2cget -y ${i2c_bus_f} 0x30 0x40)
    sleep 0.1
    i2cset -y ${i2c_bus_f} 0x30 0x40 $(printf "0x%02x" $(("$val" | 0x80)))
    sleep 0.1
    #i2cset -y 0 0x75 0x0
    bus_num_check "0x0"
    sleep 2
    print_log "done\n"

    # set secondary bus reset to 0 after reset
    set_2nd_bus_reset op2 0

    print_log "Rescan PCIe bus......"
    echo 1 > /sys/bus/pci/rescan
    sleep 1
    print_log "done\n"

    print_log "Check OP2 status......"
    op2_cnt=`lspci | grep 9800 | wc -l`
    if [ ${op2_cnt} -ne 1 ]; then
        print_log "fail: After reset, 1 OP2 should be exist!\n"
        lspci | grep 9800
        exit 2
    else
        print_log "done\n"
    fi

    print_log "After OP2 Warm Reset ...\n"
    get_pcie_status op2

    print_log "==============================\n"
    print_log "Reset OP2 Done\n\n"
}

reset_gb()
{
    print_log "Reset BCM81724...\n"
    print_log "==============================\n"

    # reset BCM81724
    print_log "Reset Assertion......"
    #i2cset -y 0 0x75 0x1
    bus_num_check "0x1"
    sleep 0.1
    val=$(i2cget -y ${i2c_bus_f} 0x30 0x41)
    sleep 0.1
    i2cset -y ${i2c_bus_f} 0x30 0x41 $(printf "0x%02x" $(("$val" & 0xC0)))
    sleep 0.1
    #i2cset -y 0 0x75 0x0
    bus_num_check "0x0"
    sleep 2
    print_log "done\n"

    # unreset BCM81724
    print_log "Reset Deassertion......"
    #i2cset -y 0 0x75 0x1
    bus_num_check "0x1"
    sleep 0.1
    val=$(i2cget -y ${i2c_bus_f} 0x30 0x41)
    sleep 0.1
    i2cset -y ${i2c_bus_f} 0x30 0x41 $(printf "0x%02x" $(("$val" | 0x3F)))
    sleep 0.1
    #i2cset -y 0 0x75 0x0
    bus_num_check "0x0"
    sleep 2
    print_log "done\n"

    print_log "==============================\n"
    print_log "Reset BCM81724 Done\n\n"
}

main()
{
    case ${2} in
    1)
        silence=1
        ;;
    *)
        silence=0
        ;;
    esac

    case ${1} in
    "mac")
        reset_mac
        ;;
    "op2")
        if [ "${model}" == "NCP1-3_OP2" ]; then
            reset_op2
        else
            print_log "\n"
            print_log "Invalid parameters"
            help
            exit 1
        fi
        ;;
    "gb")
        reset_gb
        ;;
    "all")
        if [ "${model}" == "NCP1-3_OP2" ]; then
            reset_op2
            sleep 1
        fi
        reset_gb
        sleep 1
        reset_mac
        sleep 1
        ;;
    "help")
        help
        ;;
    *)
        print_log "\n"
        print_log "Invalid parameters"
        help
        exit 1
        ;;
    esac
}

model=$(get_model)

main ${1} ${2} ${3} ${4} ${5} ${6} ${7} ${8} ${9} ${10}

exit 0
